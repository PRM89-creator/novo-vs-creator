name: Build APK com Buildozer

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Instalar dependências
      run: |
        sudo apt update
        sudo apt install -y python3-pip git zip unzip openjdk-17-jdk libffi-dev zlib1g-dev libssl-dev
        pip install --upgrade pip setuptools wheel
        pip install buildozer cython==0.29.36 kivy==2.3.0

    - name: Configurar ambiente Android
      run: |
        mkdir -p ~/.android
        touch ~/.android/repositories.cfg
        echo "sdk.dir=/usr/local/lib/android/sdk" > local.properties

    - name: Limpar espaço
      run: |
        sudo apt clean
        sudo rm -rf /usr/local/lib/android/sdk/emulator/
        sudo rm -rf /usr/local/lib/android/sdk/tools/
        df -h

    - name: Configurar Buildozer
      run: |
        buildozer init
        sed -i 's/#android.accept_sdk_license = False/android.accept_sdk_license = True/' buildozer.spec
        sed -i 's/android.arch =/android.archs =/' buildozer.spec  # Corrige deprecated warning

    - name: Compilar APK
      id: build-apk
      run: |
        # Força a geração mesmo com warnings
        buildozer -v android debug 2>&1 | tee buildozer.log || true
        
        # Busca o APK em qualquer subdiretório
        APK_PATH=$(find . -name "*.apk" -type f | head -n1)
        
        if [ -z "$APK_PATH" ]; then
          echo "::error::Nenhum APK encontrado! Logs completos:"
          cat buildozer.log
          find . -name "build.log" -exec cat {} \;
          exit 1
        else
          echo "APK encontrado em: ${APK_PATH}"
          mkdir -p deployment
          cp "${APK_PATH}" deployment/app-debug.apk
          echo "apk_path=deployment/app-debug.apk" >> $GITHUB_OUTPUT
        fi

    - name: Upload APK
      if: steps.build-apk.outputs.apk_path
      uses: actions/upload-artifact@v4
      with:
        name: app-debug
        path: ${{ steps.build-apk.outputs.apk_path }}
