name: Build APK com Buildozer

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
    - uses: actions/checkout@v4

    - name: Configurar ambiente
      run: |
        sudo DEBIAN_FRONTEND=noninteractive apt-get -qq update
        sudo DEBIAN_FRONTEND=noninteractive apt-get -qq install -y \
          python3-pip git zip unzip openjdk-17-jdk libffi-dev zlib1g-dev libssl-dev
        python3 -m pip install --quiet --upgrade pip setuptools wheel
        python3 -m pip install --quiet buildozer cython==0.29.36 kivy==2.3.0

    - name: Configurar Android SDK/NDK
      run: |
        mkdir -p ~/.android
        touch ~/.android/repositories.cfg
        echo "sdk.dir=/usr/local/lib/android/sdk" > local.properties
        echo "ndk.dir=/usr/local/lib/android/sdk/ndk/25b" >> local.properties

    - name: Limpeza de espaço
      run: |
        sudo apt-get clean
        sudo rm -rf /usr/local/lib/android/sdk/emulator/
        sudo rm -rf /usr/local/lib/android/sdk/tools/
        df -h

    - name: Preparar buildozer.spec
      run: |
        # Forçar configurações modernas
        sed -i 's/android.arch =/android.archs =/' buildozer.spec
        sed -i 's/p4a.branch = master/p4a.branch = 2024.05.06/' buildozer.spec
        sed -i 's/android.sdk = .*/android.sdk_version = 33/' buildozer.spec
        sed -i 's/android.ndk = .*/android.ndk_version = 25b/' buildozer.spec
        
        echo "=== CONFIGURAÇÃO VERIFICADA ==="
        grep -E 'android.(archs|sdk_version|ndk_version)' buildozer.spec

    - name: Compilar APK (com fallback completo)
      id: build-apk
      run: |
        set -exo pipefail
        
        # Configurações críticas
        export P4A_RELEASE_KEYSTORE=~/.keystore
        export P4A_RELEASE_KEYSTORE_PASSWD=android
        export P4A_RELEASE_KEYALIAS_PASSWD=android
        export P4A_RELEASE_KEYALIAS=androiddebugkey
        
        # Limpar builds anteriores
        rm -rf .buildozer/android/platform/build-*/{build,dists}
        
        # Build com timeout
        timeout 25m buildozer -v android debug 2>&1 | tee buildozer.log || true
        
        # Verificar erros críticos
        if grep -q "Failed to execute the last command" buildozer.log; then
          echo "::error::❌ Erro crítico durante a compilação"
          echo "=== ERROS DETECTADOS ==="
          grep -A 10 -B 5 -i "error\|fail\|exception" buildozer.log || true
          exit 1
        fi

        # Busca inteligente do APK
        APK_PATH=$(find . -path "*bin/*.apk" -type f | head -n1)
        [ -z "$APK_PATH" ] && APK_PATH=$(find . -name "*.apk" -type f | head -n1)
        
        if [ -f "$APK_PATH" ]; then
          echo "::notice::✅ APK gerado em: ${APK_PATH}"
          mkdir -p deployment
          cp "$APK_PATH" deployment/app-debug.apk
          echo "apk_path=deployment/app-debug.apk" >> $GITHUB_OUTPUT
        else
          echo "::error::❌ Falha na geração do APK"
          echo "=== LOGS DE ERRO ==="
          tail -n 100 buildozer.log
          echo "=== ARQUIVOS DE BUILD ==="
          find .buildozer -name "*.log" -exec tail -n20 {} \;
          exit 1
        fi

    - name: Upload APK
      if: steps.build-apk.outputs.apk_path
      uses: actions/upload-artifact@v4
      with:
        name: vscreator-app
        path: ${{ steps.build-apk.outputs.apk_path }}
